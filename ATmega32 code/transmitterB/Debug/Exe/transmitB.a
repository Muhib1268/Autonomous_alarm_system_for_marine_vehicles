;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;#include <delay.h>
;#include <string.h>
;#include <stdlib.h>
;
;#define AD_DATA_PIN = PIND.5; // Pin mapping of microcontroller
;#define AD_SCK_PIN = PIND.4; // Pin mapping of microcontroller
;
;// Declare your global variables here
;
;char mychar, loadData[5];        //To declare 8bit character variable
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;
;void usart_transmit(unsigned char ch )
; 0000 0015 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0016     while ( !( UCSRA & (1<<UDRE)) );
;PCODE: $0000000F VOL: 0
;	ch -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0017     UDR = ch;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0018 }
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;
;interrupt [USART_RXC] void myInterrupt(void)
; 0000 001B {
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 001C     int j=0;
; 0000 001D     //recData[i] = getchar();     //Get Character from UDR
; 0000 001E     mychar=getchar();
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;	j -> R16,R17
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 001F     if(mychar=='V')
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0020     {
; 0000 0021         lcd_clear();
;PCODE: $00000026 VOL: 0
; 0000 0022         lcd_gotoxy(0, 0);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0023         lcd_puts("Transmitting");
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0024 
; 0000 0025         for (j=0; j<strlen(loadData); j++)
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0026         {
; 0000 0027             usart_transmit(loadData[j]);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0028         }
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0029         usart_transmit('M');
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 002A     }
; 0000 002B }
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0

	.DSEG
_0x7:
	.BYTE 0xD
;
;unsigned long ReadCount()
; 0000 002E {

	.CSEG
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 002F 	unsigned long Count;
; 0000 0030 	unsigned char i;
; 0000 0031 	PORTD.4=0;                   //AD_SCK_PIN
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;	Count -> Y+1
;	i -> R17
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0032 	Count=0;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0033 	while(PIND.5);             //AD_DATA_PIN
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0034 	for (i=0;i<24;i++)
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0035 	{
; 0000 0036 		PORTD.4=1;                  //AD_SCK_PIN
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0037 		Count=Count<<1;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0038 		PORTD.4=0;                  //AD_SCK_PIN
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0039 		if(PIND.5) Count++;          //AD_DATA_PIN
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 003A 	}
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 003B 
; 0000 003C 	Count=Count^0x800000;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 003D     for(i=0;i<2; i++)
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 003E     {
; 0000 003F         PORTD.4=1;                        //AD_SCK_PIN
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0040         PORTD.4=0;                        //AD_SCK_PIN
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0041     }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0042 
; 0000 0043 	return(Count);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0044 }
;PCODE: $0000008D VOL: 0
;
;void main(void)
; 0000 0047 {
;PCODE: $0000008E VOL: 0
; 0000 0048 // Declare your local variables here
; 0000 0049 char disp[16], loadTemp[4];
; 0000 004A unsigned long data=0;
; 0000 004B int w, finalWeight;
; 0000 004C 
; 0000 004D // Input/Output Ports initialization
; 0000 004E DDRA=0xFF;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;	disp -> Y+8
;	loadTemp -> Y+4
;	data -> Y+0
;	w -> R16,R17
;	finalWeight -> R18,R19
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 004F DDRD.4=1;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0050 
; 0000 0051 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0052 MCUCSR=0xFF;  //(0<<ISC2);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0053 
; 0000 0054 // USART initialization
; 0000 0055 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0056 // USART Receiver: On
; 0000 0057 // USART Transmitter: Off
; 0000 0058 // USART Mode: Asynchronous
; 0000 0059 // USART Baud Rate: 9600
; 0000 005A UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 005B UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 005C UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 005D UBRRH=0x00;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 005E UBRRL=0x19;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 005F 
; 0000 0060 
; 0000 0061 
; 0000 0062 #asm ("sei");
;PCODE: $000000AA VOL: 0
	sei
;PCODE: $000000AB VOL: 0
; 0000 0063 // Alphanumeric LCD initialization
; 0000 0064 // Connections are specified in the
; 0000 0065 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0066 // RS - PORTA Bit 0
; 0000 0067 // RD - PORTA Bit 1
; 0000 0068 // EN - PORTA Bit 2
; 0000 0069 // D4 - PORTA Bit 4
; 0000 006A // D5 - PORTA Bit 5
; 0000 006B // D6 - PORTA Bit 6
; 0000 006C // D7 - PORTA Bit 7
; 0000 006D // Characters/line: 16
; 0000 006E lcd_init(16);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 006F 
; 0000 0070 
; 0000 0071 while (1)
;PCODE: $000000AE VOL: 0
; 0000 0072       {
; 0000 0073             data=ReadCount();
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0074             w=data/32;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0075             finalWeight=-1040;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0076             finalWeight+= w;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0077             itoa(finalWeight, disp);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0078 
; 0000 0079             if(finalWeight/3<1000)
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 007A             {
; 0000 007B                 itoa(0,loadData);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 007C                 itoa(finalWeight/3,loadTemp);
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 007D                 strcat(loadData, loadTemp);
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 007E             }
; 0000 007F             else{
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0080                 itoa(finalWeight/3,loadData);
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0081             }
;PCODE: $000000D7 VOL: 0
; 0000 0082 
; 0000 0083             lcd_clear();
;PCODE: $000000D8 VOL: 0
; 0000 0084             lcd_gotoxy(0,0);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0085             lcd_puts(disp);
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0086             lcd_gotoxy(0,1);
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0087             lcd_puts(loadData);
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0088             delay_ms(1000);
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0089       }
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 008A }
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
